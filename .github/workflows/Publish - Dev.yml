name: Publish - Dev
on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

jobs:
  publish:
    name: Publish Main
    runs-on: ubuntu-latest
    steps:
      - name: check out code ðŸ›Ž
        uses: actions/checkout@v2

      - name: Install Node v17
        uses: actions/setup-node@v2
        with:
          node-version: "17.x"
          registry-url: "https://registry.npmjs.org"

      - name: Synchronize dev version
        run: |
          npm version --git-tag-version=false $(npm view discordx version)
          npm version --git-tag-version=false major
          npm version --git-tag-version=false "$(jq --raw-output '.version' package.json)-dev"
        working-directory: ./packages/discordx

      - name: Update version
        run: npm version --git-tag-version=false ${{ github.event.inputs.version }}
        working-directory: ./packages/discordx

      - name: Export src hash
        id: src-hash
        run: echo ::set-output name=hash::$(git log --max-count=1 --pretty=format:%H packages/discordx/src);

      - name: pre-release
        id: pre-release
        run: |
          if [[ $(npm view discordx@dev version | grep -e "$(jq --raw-output '.version' package.json).*.$(echo ${{ steps.src-hash.outputs.hash }} | cut -b1-3)") ]]; \
          then echo '::set-output name=release::false'; \
          else echo '::set-output name=release::true'; fi
        working-directory: ./packages/discordx

      - name: Install Dependencies
        if: steps.pre-release.outputs.release == 'true'
        run: npm install
        working-directory: ./packages/discordx

      - name: Build
        if: steps.pre-release.outputs.release == 'true'
        run: npm run build
        working-directory: ./packages/discordx

      - name: Deprecate old versions
        if: steps.pre-release.outputs.release == 'true'
        run: npx @favware/npm-deprecate -d --name "*dev*" --package "discordx" --message "Version no longer supported. Upgrade to @latest"
        working-directory: ./packages/discordx
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish
        if: steps.pre-release.outputs.release == 'true'
        run: |
          npm version --git-tag-version=false $(jq --raw-output '.version' package.json).$(date +%s).${{ steps.src-hash.outputs.hash }}
          npm publish --tag dev
        working-directory: ./packages/discordx
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
